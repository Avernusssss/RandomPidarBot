import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
import random
from datetime import datetime, timedelta
from dotenv import load_dotenv
import aioschedule
import os
import pytz
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ (user_id, –∏–º—è)
USERS = [
    (637476473, "–ì–µ–∫–æ–Ω"),
    (944818724, "–ê–Ω–¥—Ä–æ–∏–¥"),
    (2012379285, "–î–µ—Å–µ–ø—Ç–∏–∫–æ–Ω"),
    (795615948, "–õ—É–ø–∞ –ó–∞–ª—É–ø–∞"),
    (1303275983, "–õ–µ—Ä–∞ –ü–∏—Å—å–∫–∞"),
    (5623885884, "–≤–ï—Ç–∞–ª–ï–ì"),
    (775411734, "–ï–≥–æ—Ä –æ–ø—è—Ç—å?"),
    (1164588090, "–ù–µ—Ñ–æ—Ä"),  
    (685317770, "–ß—É—Ä–∫–∞"),
    (5606121328, "–î–µ–¥ –∏–Ω—Å–∞–π–¥–∏–∫"),
    (7026933741, "–ì–ª–∞–≤–Ω—ã–π —à–∏–∑ –∫–æ–Ω—Ñ—ã"),
    (402356989, "–ó–ê–ú–ó–ê–ú–´–ß"),
    (850750045, "–ú–ê–ö–°–ò–ú–°–£–ö–ê"),
]

# –í–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGES = [
    "–ü–∏–¥–æ—Ä –¥–Ω—è {} - –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
    "–°–µ–≥–æ–¥–Ω—è –ø–∏–¥–æ—Ä–æ–º –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è {}",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞, —á—Ç–æ {} - –ø–∏–¥–æ—Ä",
    "–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω, –ø–∏–¥–æ—Ä –¥–Ω—è - {}",
    "–í—ã–ø–∞–ª {} - –Ω—É —Ç—ã –ø–æ–Ω–µ–ª",
    "–†–∞–Ω–¥–æ–º –≤—ã–±—Ä–∞–ª {} - –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–µ–ª–∞–µ—à—å",
    "–°–µ–≥–æ–¥–Ω—è {} - –∫—Ä–∞—Å–∞–≤—á–∏–∫ (–ø–∏–¥–æ—Ä—Å–∫–æ–≥–æ —Ç–∏–ø–∞)",
    "–ü–∏–¥–æ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {}",
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer('–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∏—Å–∫–∞—Ç—å –ø–∏–¥–æ—Ä–æ–≤')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    c.execute('''
        CREATE TABLE IF NOT EXISTS stats (
            user_id INTEGER,
            date DATE,
            PRIMARY KEY (user_id, date)
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–±—Ä–æ—Å–æ–≤
    c.execute('''
        CREATE TABLE IF NOT EXISTS last_reset (
            period TEXT PRIMARY KEY,
            reset_date DATE
        )
    ''')
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
def get_stats(start_date, end_date):
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    
    c.execute('''
        SELECT user_id, COUNT(*) as count 
        FROM stats 
        WHERE date BETWEEN ? AND ?
        GROUP BY user_id
    ''', (start_date, end_date))
    
    results = c.fetchall()
    conn.close()
    
    return {user_id: count for user_id, count in results}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def check_and_reset_stats():
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–±—Ä–æ—Å –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    c.execute('SELECT reset_date FROM last_reset WHERE period = "weekly"')
    last_weekly = c.fetchone()
    
    if not last_weekly or datetime.fromisoformat(last_weekly[0]).isocalendar()[1] != now.isocalendar()[1]:
        c.execute('INSERT OR REPLACE INTO last_reset (period, reset_date) VALUES ("weekly", ?)',
                 (now.isoformat(),))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–±—Ä–æ—Å –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    c.execute('SELECT reset_date FROM last_reset WHERE period = "monthly"')
    last_monthly = c.fetchone()
    
    if not last_monthly or datetime.fromisoformat(last_monthly[0]).month != now.month:
        c.execute('INSERT OR REPLACE INTO last_reset (period, reset_date) VALUES ("monthly", ?)',
                 (now.isoformat(),))
    
    conn.commit()
    conn.close()

async def send_daily_message():
    selected_user_id, selected_user_name = random.choice(USERS)
    message_template = random.choice(MESSAGES)
    user_mention = f"[‚Äå{selected_user_name}](tg://user?id={selected_user_id})"
    message = message_template.format(user_mention)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    check_and_reset_stats()
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    c.execute('INSERT INTO stats (user_id, date) VALUES (?, ?)',
             (selected_user_id, now.date().isoformat()))
    conn.commit()
    conn.close()
    
    await bot.send_message(
        chat_id=CHAT_ID, 
        text=message,
        parse_mode="Markdown"
    )

async def scheduler():
    moscow_tz = pytz.timezone('Europe/Moscow')
    
    while True:
        now = datetime.now(moscow_tz)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–∏—Ö 09:00
        if now.hour >= 9:
            # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å 9 —É—Ç—Ä–∞ –∏–ª–∏ –ø–æ–∑–∂–µ, –∂–¥—ë–º –¥–æ –∑–∞–≤—Ç—Ä–∞
            next_run = now.replace(day=now.day + 1, hour=9, minute=0, second=0, microsecond=0)
        else:
            # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —Ä–∞–Ω—å—à–µ 9 —É—Ç—Ä–∞, –∂–¥—ë–º –¥–æ 9 —É—Ç—Ä–∞ —Å–µ–≥–æ–¥–Ω—è
            next_run = now.replace(hour=9, minute=0, second=0, microsecond=0)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        delay = (next_run - now).total_seconds()
        
        # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        await asyncio.sleep(delay)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_daily_message()

def create_leaderboard_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="leaderboard_weekly"),
            InlineKeyboardButton(text="–ó–∞ –º–µ—Å—è—Ü", callback_data="leaderboard_monthly")
        ]
    ])
    return keyboard

@dp.message(Command("leaderboard"))
async def cmd_leaderboard(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=create_leaderboard_keyboard()
    )

def format_leaderboard(stats_data):
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (user_id, count)
    leaderboard = list(stats_data.items())
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    leaderboard.sort(key=lambda x: x[1], reverse=True)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = "üèÜ –¢–æ–ø –ø–∏–¥–æ—Ä–æ–≤:\n\n"
    for i, (user_id, count) in enumerate(leaderboard, 1):
        user_name = next((name for uid, name in USERS if uid == user_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        text += f"{i}. {user_name}: {count} —Ä–∞–∑(–∞)\n"
    
    return text if leaderboard else "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞ ü§∑‚Äç‚ôÇÔ∏è"

@dp.callback_query(lambda c: c.data.startswith('leaderboard_'))
async def process_leaderboard_callback(callback_query: types.CallbackQuery):
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    period = callback_query.data.split('_')[1]
    
    if period == 'weekly':
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        week_start = (now - timedelta(days=now.weekday())).date()
        stats = get_stats(week_start.isoformat(), now.date().isoformat())
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n" + format_leaderboard(stats)
    else:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        month_start = now.replace(day=1).date()
        stats = get_stats(month_start.isoformat(), now.date().isoformat())
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n" + format_leaderboard(stats)
    
    await callback_query.message.edit_text(
        text,
        reply_markup=create_leaderboard_keyboard(),
        parse_mode="Markdown"
    )
    await callback_query.answer()

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    init_db()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await bot.send_message(chat_id=CHAT_ID, text="–ú–µ–Ω—è –µ–±–∞–ª–∏, —è —Å–æ—Å–∞–ª")
    await asyncio.sleep(5)
    await send_daily_message()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    asyncio.create_task(scheduler())
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
